{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","_useState","useState","_useState2","Object","slicedToArray","showParty","setShowParty","_useWindowSize","useWindowSize","width","height","react_default","a","createElement","Fragment","id","className","dist_react_default","options","strings","autoStart","loop","style","color","fontFamily","marginTop","background","onClick","react_confetti_min_default","App","components_Header","resumeData","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAkEeA,EA7DA,WAAM,IAAAC,EAEeC,oBAAS,GAFxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEZK,EAFYH,EAAA,GAEDI,EAFCJ,EAAA,GAAAK,EAGOC,MAAlBC,EAHWF,EAGXE,MAAOC,EAHIH,EAGJG,OAGf,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KAEEH,EAAAC,EAAAC,cAAA,UAAQE,GAAG,QAETJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,uBAAd,KACEL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,QAAS,CACPC,QAAS,CAAC,eACVC,WAAW,EACXC,MAAM,MAIZV,EAAAC,EAAAC,cAAA,MAAIS,MAAO,CAAEC,MAAO,OAAQC,WAAY,gBAAxC,+HAGAb,EAAAC,EAAAC,cAAA,MAAIS,MAAO,CAAEG,UAAW,OAAQF,MAAO,iBAAvC,uOAMAZ,EAAAC,EAAAC,cAAA,UAAQS,MAAO,CAAEG,UAAW,OAAQC,WAAY,WAAaC,QAAS,kBAAMrB,GAAa,KAAzF,uBAGCD,GAAaM,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACZH,MAAOA,EACPC,OAAQA,0BC5BPmB,mLARX,OACElB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACiB,EAAD,CAAQC,WAAYA,cAJVC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08305c58.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport Typewriter from 'typewriter-effect';\nimport Confetti from 'react-confetti'\n\nconst Header = () => {\n\n  const [showParty, setShowParty] = useState(false)\n  const { width, height } = useWindowSize()\n\n\n  return (\n    <React.Fragment>\n\n      <header id=\"home\">\n\n        <div className=\"row banner\">\n          <div className=\"banner-text\">\n            <h1 className=\"responsive-headline\">Hi\n              <Typewriter\n                options={{\n                  strings: ['Neha Mangla'],\n                  autoStart: true,\n                  loop: true,\n                }}\n              />\n            </h1>\n            <h3 style={{ color: '#fff', fontFamily: 'sans-serif ' }}>This valentine I wanted to give you something interesting and valuable but then I realized you already have me in your life\n            </h3>\n\n            <h3 style={{ marginTop: \"50px\", color: \"antiquewhite\" }}>\n              You are the best thing happened to me this year, I can feel my heartbeat when I am with you.\n              I am more than excited to spend the next adventure together called life with you.\n              If you accept my proposal, click on the button below\n            </h3>\n\n            <button style={{ marginTop: \"50px\", background: \"#AA336A\" }} onClick={() => setShowParty(true)}> Yes I am all yours</button>\n\n\n            {showParty && <Confetti\n              width={width}\n              height={height}\n            />}\n            {/* <hr/> */}\n            {/* <ul className=\"social\">\n                  {\n                    resumeData.socialLinks && resumeData.socialLinks.map(item =>{\n                      return(\n                              <li key={item.name}>\n                                <a href={item.url} target=\"_blank\"><i className={item.className}></i></a>\n                              </li>\n                            )\n                          }\n                    )\n                  }\n               </ul> */}\n          </div>\n        </div>\n\n\n      </header>\n    </React.Fragment>\n  );\n}\n\n\nexport default Header","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport resumeData from './resumeData';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header resumeData={resumeData}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}